@model TbSlider
<div class="content-wrapper">
    <div class="page-header">
    </div>
    <div class="row">
        <div class="col-md-8 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <form class="forms-sample" method="post" enctype="multipart/form-data"
                          id="MyForm" asp-controller="Slider" asp-action="Edit" role="form">

                        <input type="hidden" asp-for="SliderId" />
                        <input type="hidden" asp-for="CreatedBy" />
                        <input type="hidden" asp-for="CurrentState" />
                        <input type="hidden" asp-for="CreatedDate" />
                        <input type="hidden" asp-for="UpdatedBy" />
                        <input type="hidden" asp-for="UpdatedDate" />

                        <input id="HiddenInputImage" type="hidden" asp-for="ImageName" />

                        <div class="form-group">
                            <label for="exampleInputUsername1">
                                @ResWebSite.lblImage
                            </label>

                            <input id="imageUpload" type="file" name="Files"
                                   class="form-control" placeholder="@ResWebSite.lblImage"
                                   onchange="handleImageChange(event)"
                                   accept=".jpg, .jpeg, .png, .gif">
                            <span style="color:crimson" asp-validation-for="ImageName"></span>
                        </div>

                        <div class="form-group col-md-12" style="float:left;">
                            <label for="exampleInputUsername1">@ResWebSite.lblTitle</label>
                            <input asp-for="Title" type="text" class="form-control" placeholder="@ResWebSite.lblTitle">
                            <span style="color:crimson" asp-validation-for="Title"></span>
                        </div>

                        <div class="form-group col-md-12" style="float:left;">
                            <label for="exampleInputUsername1">@ResWebSite.lblDescription</label>
                            <input asp-for="Description" type="text" class="form-control" placeholder="@ResWebSite.lblDescription">
                            <span style="color:crimson" asp-validation-for="Description"></span>
                        </div>

                        <button  type="submit" formmethod="post" class="btn btn-gradient-primary me-2 col-md-2 ">@ResWebSite.lblSave</button>

                    </form>
                </div>
            </div>
        </div>
        <div st class="col-md-4 grid-margin stretch-card">
            <div style="width:50%" class="card">
                <div class="card-body">
                    <span id="tbImgName"></span>
                    <div id="tbImgSrc">
                        @if (string.IsNullOrEmpty(Model.ImageName))
                        {
                            <img src="~/Admin/assets/images/samples/bootstrap-stack.png" style="width:95%; height300px;" />
                        }
                        else
                        {
                            <img src="~/Uploads/Slider/@Model.ImageName" style="width:95%; height300px;" />
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    @if (!string.IsNullOrEmpty(ViewBag.Failed))
    {
        <script>
            // Display a SweetAlert popup
            Swal.fire({
                icon: 'error',
                title: '@ViewBag.Failed',
                showConfirmButton: true // Show a confirm button
            }).then((result) => {
            @{
                ViewBag.Failed = ""; // Assigning ViewBag.Success in Razor code
            }
                                    });
        </script>
    }
    <script>
        function handleImageChange(event) {
            const file = event.target.files[0];

            // Call the file extension validation function
            if (!validateFileExtension(file)) {
                document.getElementById("imageUpload").value = "";
                return; // Return if the file extension is invalid
            }
            if (!validateFileSize(file)) {
                document.getElementById("imageUpload").value = "";
                return; // Return if the file size exceeds the limit
            }
            // Call the UploadDefaultImg function
            UploadDefaultImg(file);
        }
        function validateFileExtension(file) {
            var fileName = file.name;
            var fileExtension = fileName.split('.').pop().toLowerCase();
            var allowedExtensions = ['jpg', 'jpeg', 'png', 'gif'];

            if (allowedExtensions.indexOf(fileExtension) === -1) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Extension',
                    text: 'Only JPG, JPEG, PNG, and GIF files are allowed.',
                    confirmButtonText: 'OK'
                });
                return false;
            }
            return true;
        }
        function validateFileSize(file) {
            const maxSize = 10 * 1024 * 1024; // 10 MB limit
            if (file.size > maxSize) {
                Swal.fire({
                    icon: 'error',
                    title: 'Invalid Size',
                    text: 'Image size exceeds the maximum allowed size (10 MB).',
                    confirmButtonText: 'OK'
                });
                return false;
            }
            return true;
        }
        function UploadDefaultImg(file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                const imageData = {
                    name: file.name,
                    base64: reader.result.slice(reader.result.indexOf('base64,') + 7)
                };

                const imagePreviewHTML = getImagePreviewHTML(reader.result);

                // Pass the file data and image preview HTML to the caller
                handleImageUpload(imageData, imagePreviewHTML);
            };
            reader.readAsDataURL(file);
        }

        function getImagePreviewHTML(imageDataURL) {
            return `<img class="thumbnail" src="${imageDataURL}" style="width: 95%; height: 300px; border-radius: 5px; border: 1px solid #d9d9d9; padding: 1px;" />`;
        }

        function handleImageUpload(imageData, imagePreviewHTML) {
            // Example usage: Update DOM elements with image data and preview HTML
            document.getElementById("tbImgSrc").innerHTML = imagePreviewHTML;
            // Additional logic for handling the image data as needed
        }
    </script>
}
